#!/bin/bash

# Process command line options.
backup=false

while getopts ":a" opt; do
  case ${opt} in
    a )
      backup=true
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# Check if release is already running
if [ -f "release-running" ]; then
    echo "Release is already running. Exiting."
    rm release-running -f
    exit 1
fi

# Determine git branch based on environment if not provided
git_branch=$2
if [ -z "$2" ]; then
  if [ $1 == "live" ]; then
    git_branch="production"
  elif [ $1 == "dev" ] || [ $1 == "test" ]; then
    git_branch="develop"
  fi
fi

# Set to running
touch release-running;

# Check that the right number of arguments are provided
if [ $# -lt 1 ]; then
    echo "Please provide the environment ('dev', 'test', or 'live') and (OPTIONALL) Git branch"
    exit 1
fi

# Optional backup
if [[ $backup == true ]]; then

    # Fetch the latest tags from the GitHub repository
    git fetch --tags "https://github.com/axllent/ssbak.git"

    # Get the latest tag using 'git describe' command
    latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))

    # move README out of the way
    mv README.md README.md.bak

    # remove any files left from last time
    rm ssbak -rf
    rm ssbak_linux_amd64.tar.gz -rf
    rm ./backup.sspak -rf

    # download latest
    wget https://github.com/axllent/ssbak/releases/download/$latest_tag/ssbak_linux_amd64.tar.gz

    # install
    tar zxvf ssbak_linux_amd64.tar.gz
    chmod +x ./ssbak

    # backup 
    ./ssbak save . ./backup.sspak

    # cleanup
    rm ssbak -rf
    rm ssbak_linux_amd64.tar.gz -rf
    rm LICENSE -rf
    rm README.md -rf
    mv README.md.bak README.md
fi


# not release data in release.log
echo "=========================" >> release.log
echo "Time: $(date). START UPDATE: " >> release.log
echo "=========================" >> release.log
date >> release.log
git describe --all --long >> release.log

# get git
# Git actions with chosen branch
git fetch --all
git checkout $2
git pull origin $2

# Provide a flag: dev / test / live
if [ $1 == "dev" ]; then
    git checkout develop
    git pull origin develop
    composer update --prefer-source
    composer vendor-expose
    vendor/bin/sake dev/build flush=all
elif [ $1 == "test" ]; then
    echo "TEST environment"
elif [ $1 == "live" ]; then
    echo "LIVE environment"
else
    echo "Invalid argument. Please specify 'dev', 'test', or 'live'"
    exit 1
fi

# Only run the following commands if the argument is not "dev"
if [ $1 != "dev" ]; then
    composer install --prefer-dist --no-dev
    vendor/bin/sake dev/build flush=all
    composer vendor-expose

    git describe --all --long >> release.log

    echo "=========================" >> release.log
    echo "DONE" >> release.log
    echo "=========================" >> release.log
    echo "" >> release.log
    echo "" >> release.log

    ##########################################
    # Ping Release if FIA_RELEASE_PING_URL is set
    ##########################################

    source .env
    if [ -n "$FIA_RELEASE_PING_URL" ]; then
        GIT_HASH=$(git rev-parse HEAD)
        URL_WITH_HASH="${FIA_RELEASE_PING_URL}${GIT_HASH}"
        wget -S -qO- "${URL_WITH_HASH}"
    fi

    echo ""
    echo "DONE"
    echo ""

    ###############################
    # FIX FRONT-END
    ###############################
    if [ $1 == "test" ]; then
        sed -i 's/SS_ENVIRONMENT_TYPE="test"/SS_ENVIRONMENT_TYPE="dev"/g' $FILE_PATH
    elif [ $1 == "live" ]; then
        sed -i 's/SS_ENVIRONMENT_TYPE="live"/SS_ENVIRONMENT_TYPE="dev"/g' $FILE_PATH
    fi

    FILE_PATH="./.env"
    BASE_URL=$(grep -oP 'SS_BASE_URL="\K[^"]+' $FILE_PATH)
    # Remove any trailing slash
    BASE_URL="${BASE_URL%/}"
    NEW_URL="${BASE_URL}/dev/?flush=all"
    wget -O  - $NEW_URL


    # Switch SS_ENVIRONMENT_TYPE back to its original value
    if [ $1 == "test" ]; then
        sed -i 's/SS_ENVIRONMENT_TYPE="dev"/SS_ENVIRONMENT_TYPE="test"/g' $FILE_PATH
    elif [ $1 == "live" ]; then
        sed -i 's/SS_ENVIRONMENT_TYPE="dev"/SS_ENVIRONMENT_TYPE="live"/g' $FILE_PATH
    fi
fi

rm release-running -f
